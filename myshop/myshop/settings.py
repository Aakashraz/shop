"""
Django settings for myshop project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# For Images
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-t__uhz$8y$3(%z+td+nqppq!@r0ont6-nl%a5@_#-lkqsj_027'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'shop.apps.ShopConfig',
    'cart.apps.CartConfig',
    'orders.apps.OrdersConfig',
    'payment.apps.PaymentConfig',

    'author',
    'import_export',
    'import_export_celery',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'author.middlewares.AuthorDefaultBackendMiddleware',
]

ROOT_URLCONF = 'myshop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart.context_processors.cart',     # custom context processor added

            ],
        },
    },
]

WSGI_APPLICATION = 'myshop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kathmandu'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


CART_SESSION_ID = 'cart'    # Key used to store the cart in the session


# To write email to the console
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# Celery Configuration with RabbitMQ Docker
CELERY_BROKER_URL = 'amqp://guest:guest@localhost:5672//'
CELERY_RESULT_BACKEND = 'rpc://'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Kathmandu'

# CELERY_BROKER_URL = 'amqp://guest:guest@localhost:5672//'
# This is the address of your message "post office" (the broker).
# It tells Celery where to send new task requests.
#
# amqp://: The protocol used to talk to RabbitMQ.
#
# guest:guest: The default username and password for RabbitMQ.
#
# @localhost:5672: The location of the RabbitMQ server, in this case,
# running on your own machine (localhost) on port 5672.
#
# CELERY_RESULT_BACKEND = 'rpc://'
# This tells Celery where to store the results of a completed task (e.g., "Success", "Failed," or a return value).
# Using rpc:// is a simple option where results are sent back directly to the client that requested the task.
# However, these results are temporary and disappear once you've retrieved them.
#
# CELERY_ACCEPT_CONTENT = ['application/json']
# This specifies that Celery should only accept tasks formatted in JSON, a standard, human-readable data format.
#
# CELERY_TASK_SERIALIZER = 'json' & CELERY_RESULT_SERIALIZER = 'json'
# These settings tell Celery to use the JSON format to package (serialize) the task itself and
# its result before sending them over the network. This ensures all parts of your system can understand the data.
#
# CELERY_TIMEZONE = 'Asia/Kathmandu'
# This sets the timezone for your tasks. It's crucial for scheduling tasks to run at
# specific times, ensuring they execute correctly, according to your local time.



# This dictionary is a registry. It tells the application which Django models
# are allowed to be imported or exported as background jobs.
# django-import-export-celery Configuration
IMPORT_EXPORT_CELERY_MODELS = {
    "Order": {
        'app_label': 'orders',
        'model_name': 'Order',
        'resource': 'orders.resources.OrderResource',   # This is a common pattern in Django and Python libraries,
        # where strings in configuration settings are lazily imported only when needed, rather than
        # at the time the settings file is loaded.
    }
}

# Bulk import export Celery configuration
IMPORT_EXPORT_CELERY_INIT_MODULE = 'myshop.celery'
# This setting tells the django-import-export-celery library where to find your project's main Celeery application instance.
# Essentially, you're telling the import-export library: "When you need to create a background tasks for an import or
# export, use the Celery application defined in the myshop/celery.py file." This ensures that the import/export
# tasks are sent to the correct Celery instance that you've already configured for your project.

# Importing stripe credentials
from decouple import config

STRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY')
STRIPE_API_VERSION= '2024-04-10'
STRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET')


# Increase the max number of POST fields to allow for large admin actions
# The default is 1000
DATA_UPLOAD_MAX_NUMBER_FIELDS = 3200

# LOGGING CONFIGURATION
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'INFO',
        },
    },
    'logger': {
        '': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'order.resources': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}